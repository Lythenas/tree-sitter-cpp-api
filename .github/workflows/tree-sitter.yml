name: MiniLua

on: [push, pull_request]

jobs:
  test-gcc-with-coverage:
    name: Build & Test with Coverage on GCC
    runs-on: ubuntu-20.04

    env:
      CC: gcc
      CXX: g++

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup VM
        run: ./.github/workflows/install_packages.sh
      - name: Setup CMake
        run: ./scripts/setup.sh -DCMAKE_BUILD_TYPE=Coverage
      - name: Build
        run: ./scripts/build.sh
      - name: Test with Coverage
        run: ./scripts/test_coverage.sh
      - name: Upload coverage
        run: ./scripts/upload_coverage.sh

  test-gcc-75:
    name: Build & Test on GCC 7.5.0
    runs-on: ubuntu-20.04

    env:
      CC: gcc-7
      CXX: g++-7

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup VM
        run: ./.github/workflows/install_packages.sh
      - name: Setup CMake
        run: ./scripts/setup.sh -DCMAKE_BUILD_TYPE=Debug
      - name: Build
        run: ./scripts/build.sh
      - name: Test
        run: ./scripts/test.sh


  test-clang:
    name: Build & Test on Clang
    runs-on: ubuntu-20.04

    env:
      CC: clang-10
      CXX: clang++-10

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup VM
        run: ./.github/workflows/install_packages.sh
      - name: Setup CMake
        run: ./scripts/setup.sh -DCMAKE_BUILD_TYPE=Debug
      - name: Build
        run: ./scripts/build.sh
      - name: Test
        run: ./scripts/test.sh

  address-sanitizer:
    name: Address Sanitizer
    runs-on: ubuntu-20.04

    env:
      CC: clang-10
      CXX: clang++-10
      # ASAN_SYMBOLIZER_PATH: llvm-symbolizer-10

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup VM
        run: ./.github/workflows/install_packages.sh
      - name: Setup CMake
        run: ./scripts/setup.sh -DCMAKE_BUILD_TYPE=Asan
      - name: Build
        run: ./scripts/build.sh
      - name: Test
        run: ./scripts/test.sh "~[leaks]~[hide]"

  undefined-behaviour-sanitizer:
    name: Undefined Behaviour Sanitizer
    runs-on: ubuntu-20.04

    env:
      CC: clang-10
      CXX: clang++-10

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup VM
        run: ./.github/workflows/install_packages.sh
      - name: Setup CMake
        run: ./scripts/setup.sh -DCMAKE_BUILD_TYPE=Ubsan
      - name: Build
        run: ./scripts/build.sh
      - name: Test
        run: ./scripts/test.sh

  lint:
    name: Linting
    runs-on: ubuntu-20.04

    env:
      CC: clang-10
      CXX: clang++-10
      CLANG_TIDY: clang-tidy-10

    continue-on-error: true

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup VM
        run: |
          ./.github/workflows/install_packages.sh
          sudo apt-get install clang-tidy
      - name: Setup CMake
        run: ./scripts/setup.sh
      - name: Lint
        run: ./scripts/lint.sh

  check-code-format:
    name: Check Code Format
    runs-on: ubuntu-20.04

    env:
      CC: clang-10
      CXX: clang++-10
      CLANG_FORMAT: clang-format-11

    continue-on-error: false

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          submodules: true
      - name: Setup VM
        run: |
          ./.github/workflows/install_packages.sh
          sudo apt-get install clang-format-11
      - name: Setup CMake
        run: ./scripts/setup.sh
      - name: Lint
        run: ./scripts/check_format.sh

